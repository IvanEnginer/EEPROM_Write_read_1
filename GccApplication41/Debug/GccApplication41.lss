
GccApplication41.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000000bc  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800072  00800072  00000162  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000008af  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000030  00000000  00000000  000008de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000001c2  00000000  00000000  0000090e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000c7  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000083  00000000  00000000  00000b97  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000044  00000000  00000000  00000c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000138  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000f8  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ec eb       	ldi	r30, 0xBC	; 188
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 37       	cpi	r26, 0x72	; 114
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a2 e7       	ldi	r26, 0x72	; 114
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a3 38       	cpi	r26, 0x83	; 131
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	29 d0       	rcall	.+82     	; 0x96 <main>
  44:	39 c0       	rjmp	.+114    	; 0xb8 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <_Z19EEPROM_write_stringiiPc>:
#include <avr/io.h>

void EEPROM_write_string(int address, int lenght, char *data)
{
	while (lenght)
  48:	61 15       	cp	r22, r1
  4a:	71 05       	cpc	r23, r1
  4c:	81 f0       	breq	.+32     	; 0x6e <_Z19EEPROM_write_stringiiPc+0x26>
#include <avr/io.h>

void EEPROM_write_string(int address, int lenght, char *data)
  4e:	64 0f       	add	r22, r20
  50:	75 1f       	adc	r23, r21
  52:	fa 01       	movw	r30, r20
  54:	84 1b       	sub	r24, r20
{
	while (lenght)
	{
		while (EECR & (1 << 1));
  56:	e1 99       	sbic	0x1c, 1	; 28
  58:	fe cf       	rjmp	.-4      	; 0x56 <_Z19EEPROM_write_stringiiPc+0xe>
#include <avr/io.h>

void EEPROM_write_string(int address, int lenght, char *data)
  5a:	98 2f       	mov	r25, r24
  5c:	9e 0f       	add	r25, r30
{
	while (lenght)
	{
		while (EECR & (1 << 1));
		EEAR = address;
  5e:	9e bb       	out	0x1e, r25	; 30
		address = address + 1;
		EEDR = *data;
  60:	91 91       	ld	r25, Z+
  62:	9d bb       	out	0x1d, r25	; 29
		data = data + 1;
		EECR |= (1 << 2);
  64:	e2 9a       	sbi	0x1c, 2	; 28
		EECR |= (1 << 1);
  66:	e1 9a       	sbi	0x1c, 1	; 28
#include <avr/io.h>

void EEPROM_write_string(int address, int lenght, char *data)
{
	while (lenght)
  68:	e6 17       	cp	r30, r22
  6a:	f7 07       	cpc	r31, r23
  6c:	a1 f7       	brne	.-24     	; 0x56 <_Z19EEPROM_write_stringiiPc+0xe>
  6e:	08 95       	ret

00000070 <_Z18EEPROM_read_stringiiPc>:
	}
}

void EEPROM_read_string(int address, int lenght, char *data)
{
	while (EECR & (1 << 1));
  70:	e1 99       	sbic	0x1c, 1	; 28
  72:	fe cf       	rjmp	.-4      	; 0x70 <_Z18EEPROM_read_stringiiPc>
	while (lenght--)
  74:	61 15       	cp	r22, r1
  76:	71 05       	cpc	r23, r1
  78:	69 f0       	breq	.+26     	; 0x94 <_Z18EEPROM_read_stringiiPc+0x24>
		EECR |= (1 << 1);
		lenght = lenght - 1;
	}
}

void EEPROM_read_string(int address, int lenght, char *data)
  7a:	64 0f       	add	r22, r20
  7c:	75 1f       	adc	r23, r21
  7e:	fa 01       	movw	r30, r20
  80:	84 1b       	sub	r24, r20
  82:	98 2f       	mov	r25, r24
  84:	9e 0f       	add	r25, r30
{
	while (EECR & (1 << 1));
	while (lenght--)
	{
		EEAR = address++;
  86:	9e bb       	out	0x1e, r25	; 30
		EECR |= (1 << 0);
  88:	e0 9a       	sbi	0x1c, 0	; 28
		*data = EEDR;
  8a:	9d b3       	in	r25, 0x1d	; 29
  8c:	91 93       	st	Z+, r25
}

void EEPROM_read_string(int address, int lenght, char *data)
{
	while (EECR & (1 << 1));
	while (lenght--)
  8e:	e6 17       	cp	r30, r22
  90:	f7 07       	cpc	r31, r23
  92:	b9 f7       	brne	.-18     	; 0x82 <_Z18EEPROM_read_stringiiPc+0x12>
  94:	08 95       	ret

00000096 <main>:
}

int main(void)
{
static char stroka_iz_ram_v_eeprom[17] ="работа с eeprom0";
EEPROM_write_string(0x00, 17, &stroka_iz_ram_v_eeprom[0]);
  96:	40 e6       	ldi	r20, 0x60	; 96
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	61 e1       	ldi	r22, 0x11	; 17
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	d2 df       	rcall	.-92     	; 0x48 <_Z19EEPROM_write_stringiiPc>
static char stroka_iz_eeprom_v_ram[17];
EEPROM_read_string(0x00, 17, &stroka_iz_eeprom_v_ram[0]);
  a4:	42 e7       	ldi	r20, 0x72	; 114
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	61 e1       	ldi	r22, 0x11	; 17
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	df df       	rcall	.-66     	; 0x70 <_Z18EEPROM_read_stringiiPc>

  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
